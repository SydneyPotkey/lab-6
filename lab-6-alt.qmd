---
title: "Lab 6 - Alternative"
subtitle: "Contributing to R for Data Science"
editor: source
---

The exercises from the functions below were pulled from the newest version of
[*R for Data Science*](https://r4ds.hadley.nz/). Specifically, from Chapters 25 
and 26. For this "alternative" lab you will complete the exercises from the 
textbook, with the option of submitting a pull request to the 
[repository for the textbook solutions](https://github.com/mine-cetinkaya-rundel/r4ds-solutions/).

# Vector Functions

**Question 1:** The `rescale01()` function below performs a min-max scaling to 
standardize a numeric vector, but infinite values are left unchanged. Rewrite
`rescale01()` so that `-Inf` is mapped to 0, and `Inf` is mapped to 1?
*Hint: This seems like a great place for `case_when()`!

```{r}
#| label: question-1

rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE, finite = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
  case_when(x == -Inf ~ 0,
    x == Inf ~ 1,
    TRUE ~ scaled)
}

```

**Question 2:** Write a function that accepts a vector of birthdates and 
computes the age of each person in years.

```{r}
#| label: question-2
library(tidyverse)
library(lubridate)

compute_age <- function(dates){
  today <- Sys.Date() 
  age <- as.numeric(difftime(today,
                             dates,
                             units = "weeks")) / 52.25
return(age)
}



```

**Question 3:** Write a function that computes the variance and skewness of a
numeric vector. Feel free to look up the definitions on Wikipedia or elsewhere!

```{r}
#| label: question-3

var_and_skew <- function(vec){
  n <- length(vec)
  s <- sd(vec)
  var <- sum((vec - mean(vec))^2 / (n-1))
  skew <- sum((vec - mean(vec))^3 / (n-1)*s^3)
  
  return(list(variance = var, skewness = skew))
}



```

**Question 4:** Write a function called `both_na()` which takes two vectors of
the same length and returns the number of positions that have an `NA` in both
vectors.

```{r}

both_na <- function(vec1, vec2){
  sum(is.na(vec1) + is.na(vec2))
}


```

## Data Frame Functions

**Question 5:** Insert the data frame function you wrote from Lab 6 (either
Exercise 1 or Exercise 2). 

```{r}
#| label: function-from-lab-2

remove_outliers <- function(data, ..., sd_thresh = 3) {
  vars <- enquos(...)
  
  # check variable type
  for (var in vars) {
    col <- eval_tidy(var, data)
    if (!is.numeric(col)) {
      return(NA)
    }
  }
  
  keep <- rep(TRUE, nrow(data))
  for (var in vars) {
    col <- eval_tidy(var, data)
    z <- (col - mean(col)) / sd(col)
    keep <- keep & abs(z) <= sd_thresh
  }
  
  return(data[keep, ])
}


```

For Questions 6 - 10 you will write different functions which work with data 
similar to the `nycflights13` data. 

**Question 6:** Write a `filter_severe()` function that finds all flights that
were cancelled (i.e. `is.na(arr_time)`) or delayed by more than an hour.

```{r}
#| label: question-6
library(nycflights13)

filter_severe <- function(data){
  severe_data <- filter(is.na(arr_time) | arr_delay > 60)
}

```

**Question 7:** Write a `summarize_severe()` function that counts the number of 
cancelled flights and the number of flights delayed by more than an hour.

```{r}
#| label: question-7

summarize_severe <- function(severe_data){
  cancelled <- sum(is.na(arr_time))
  delayed <- nrow(severe_data) - cancelled
  
  return(list(cancelled = cancelled, delayed = delayed))
}

```

**Question 8:** Modify your `filter_severe()` function to allow the user to 
supply the number of hours that should be used to filter the flights that were
cancelled or delayed. 

```{r}
#| label: question-8

severe_modified <- function(data, hours){
  severe_data <- filter(is.na(arr_time) | arr_delay > hours)
  
}

```

**Question 9:** Write a `summarize_weather()` function that summarizes the
weather to compute the minimum, mean, and maximum, of a user supplied variable. 

```{r}
#| label: question-9

summarize_weather <- function(var){
  min <- min(var)
  mean <- mean(var)
  max <- max(var)
  
  return(list(minimum = min, mean = mean, maximum = max))
}

```

**Question 10:** Write a `standardize_time()` function that converts the user
supplied variable that uses clock time (e.g., `dep_time`, `arr_time`, etc.) into
a decimal time (i.e. hours + (minutes / 60)).

```{r}
#| label: question-10

standardize_time <- function(time_var){
  hours <- time_var %/% 100
  minutes <- time_var %% 100
  time <- hours + (minutes / 60)
    
  return(time)
}

```

# Plotting Functions

You might want to read over the [Plot Functions section of *R for Data Science*](https://r4ds.hadley.nz/functions.html#plot-functions)

**Question 11:** Build a `sorted_bars()` function which:

- takes a data frame and a variable as inputs and returns a **vertical** bar
chart 
- sorts the bars in decreasing order (largest to smallest)
- adds a title that includes the context of the variable being plotted

*Hint 1: The `fct_infreq()` and `fct_rev()` functions from the forcats package will be helpful for sorting the bars!*
*Hint 2: The `englue()` function from the rlang package will be helpful for adding a variable's name into the plot title!*

```{r}
#| label: question-11

```

# Iteration

Alright, now let's take our plotting function and iterate it! 

**Question 12:** Make a sorted barplot for every character variable in the `mpg`
dataset (built into `ggplot2`). 

```{r}
#| label: question-12

```

# Contributing to the R for Data Science Community!

The functions you wrote for exercises 1-10 came from *R for Data Science*. You
could consider making a pull request to the repository for the solutions! 

<https://github.com/mine-cetinkaya-rundel/r4ds-solutions>

To learn more about how to make a pull request I would suggest this article: <https://usethis.r-lib.org/articles/pr-functions.html>
